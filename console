#!/bin/bash
#取得scripts的執行路徑
base_path="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"

function fial_exit {
    if [ $? -eq 1 ]; then
        exit;
    fi
}

#建立sites資料夾，如果不存在
if [ ! -d "${base_path}/sites/" ]; then
   mkdir -p "${base_path}/sites/"
fi

#開發測試中Beta
if [ "${1}" == "alias" ]; then
calias="alias c=${base_path}/console"
echo ${calias}
exit;
fi

# 停止並移除所有啟動中及停用的container
if [ "${1}" == "clear" ]; then
    echo "Would You like to stop / remove all Docker containers?(y/n)"
    read  ans
    if [ ${ans} = 'n' ]; then
        exit
    else 
        #檢測是否有container啟動中
         docker ps|grep -q Up
        if [ $? -eq 0 ]; then
         docker stop $(docker ps --format '{{.Names}}')
        fi
        if [ ! -z "$(docker ps -a -q)" ]; then
         docker rm $(docker ps -a -q)
        fi
    fi
    exit;
fi

#顯示docker-compose的設定檔連結
if [ "${1}" == "link" ]; then
    ls -l ${base_path}/docker-compose.yml
    exit;
fi

#下載images
if [ "${1}" == "pull" ]; then
    docker pull nginx 
    docker pull mysql:5.7.17
    docker pull deviny/fpm:7.1.1
    exit;
fi

#變更模式, web:80, db:127.0.0.1:3306
if [ "${1}" == "normal" ]; then
    #先嚐試停止
    docker-compose -f ${base_path}/docker-compose.yml down > /dev/null 2>&1
    echo "docker-compose setting file changed."
    echo "HOST DB: listen on 127.0.0.1:3306."
    echo "HOST WEB: listen on port 80."
    ln -vsf ${base_path}/docker-compose-normal.yml ${base_path}/docker-compose.yml
    docker-compose -f ${base_path}/docker-compose.yml up -d
    ${base_path}/console info
    exit;
fi

#隨機
if [ "${1}" == "random" ]; then
    #先嚐試停止
    docker-compose -f ${base_path}/docker-compose.yml down > /dev/null 2>&1
    echo "docker-compose setting file changed."
    echo "HOST DB: listen on random port."
    echo "HOST WEB: listen on random port."
    ln -vsf ${base_path}/docker-compose-random.yml ${base_path}/docker-compose.yml
    docker-compose -f ${base_path}/docker-compose.yml up -d
    ${base_path}/console info
    exit;
fi

#Custom Config
if [ "${1}" == "custom" ]; then
    #檢測docker-compose-custom.yml是否存在
    if [ -e "${base_path}/docker-compose-custom.yml" ]; then
        docker-compose -f ${base_path}/docker-compose.yml down > /dev/null 2>&1
        ln -vsf ${base_path}/docker-compose-custom.yml ${base_path}/docker-compose.yml 
        docker-compose -f ${base_path}/docker-compose.yml up -d
    else
        cp ${base_path}/docker-compose-random.yml ${base_path}/docker-compose-custom.yml
        ln -vsf ${base_path}/docker-compose-custom.yml ${base_path}/docker-compose.yml 
        echo "docker-compose-custom.yml is created."
        docker-compose -f ${base_path}/docker-compose.yml up -d
    fi 
    ${base_path}/console info
    exit;
fi


#停止docker-compose
if [ "${1}" == "down" ]; then
    if [ -e ${base_path}/docker-compose.yml ]; then
        docker-compose -f ${base_path}/docker-compose.yml down --remove-orphans
        else
        docker-compose -f ${base_path}/docker-compose-random.yml down --remove-orphans
    fi
exit;
fi

#重啟
if [ "${1}" == "restart" ]; then
docker-compose -f ${base_path}/docker-compose.yml down
docker-compose -f ${base_path}/docker-compose.yml up -d
fial_exit 
echo "DB:"
${base_path}/scripts/db-ports
echo "Web:"
${base_path}/scripts/web-ports
exit;
fi

if [ "${1}" == "up" ]; then
    if [ ! -f "${base_path}/docker-compose.yml" ]; then
        echo ${base_path}
        #檔案不存在，進行預設的soft link
        ln -s ${base_path}/docker-compose-random.yml ${base_path}/docker-compose.yml
    fi
        docker-compose -f ${base_path}/docker-compose.yml up -d
        fial_exit 
    echo "DB:"
        #設定DB的時區到Asia/Taipei
        ${base_path}/scripts/db-ports
        echo "Web:"
        ${base_path}/scripts/web-ports
    exit;
fi

#執行
if [ "${1}" == "exec" ]; then
    number=0;
    until [ -z "${1}" ]
        do
            number=$((${number} + 1));
            if [ ${number} -eq 2 ]; then
                #echo ${@}
                docker-compose -f ${base_path}/docker-compose.yml exec php ${@} 
                exit
            fi
        shift
    done
    echo "Run command of php container."
    echo -e "./console exec [command].\n"
    echo "for example:"
    echo "./console exec php -v"
    echo "./console exec composer -v"
    exit
fi

#進資料庫
if [ "${1}" == "mysql" ]; then
docker-compose -f ${base_path}/docker-compose.yml exec db mysql
exit;
fi

#啟動時檢測網頁資訊
if [ "${1}" == "info" ]; then
    echo "DB:"
    ${base_path}/scripts/db-ports
    echo "Web:"
    ${base_path}/scripts/web-ports
    exit;
fi

#執行ps
if [ "${1}" == "ps" ]; then
echo ${base_path}
docker-compose -f ${base_path}/docker-compose.yml ps
exit
fi

#使用self-signed的憑證 
if [ "${1}" == "secure" ]; then
#檢測Project資料夾
if [ ! -d "${base_path}/sites/${2}" ]; then
    echo "Unabel to find project \"${2}\"!" 
    exit
fi
#檢測project是否有ssl的資料夾
if [ ! -d "${base_path}/sites/${2}/ssl" ]; then
    mkdir -p "${base_path}/sites/${2}/ssl"
fi

#拷nginx ssl的sample設定
cp ./etc/default-ssl.sample ./etc/${2}-ssl.conf

#變更文字
sed -i '' "s/laravel/${2}/" ./etc/${2}-ssl.conf

openssl req \
-subj "/C=TW/ST=Taiwan/L=Panchiao/CN=${2}.dev" \
-new -newkey rsa:2048 -sha256 -days 3650 -nodes -x509 -keyout ${base_path}/sites/${2}/ssl/cert.key -out ${base_path}/sites/${2}/ssl/cert.crt

#不管有沒有先刪一次
#sudo security delete-certificate -c "${2}.dev" -t /Library/Keychains/System.keychain

sudo security add-trusted-cert -d -r trustRoot -k "/Library/Keychains/System.keychain" ${base_path}/sites/${2}/ssl/cert.crt

docker-compose -f ${base_path}/docker-compose.yml ps|grep -q php-fpm
if [ $? -eq 0 ]; then
    source ./scripts/nginx-reload
fi
exit
fi

#顯示log
if [ "${1}" == "logs" ]; then
    docker-compose -f ${base_path}/docker-compose.yml logs -f web
exit
fi

#重新載入nginx設定
if [ "${1}" == "reload" ]; then
docker-compose -f ${base_path}/docker-compose.yml exec web nginx -s reload
exit
fi
function help {
    echo "usage: ${0} [<option>]"
    echo ""
    echo "options:"
    echo "  up : 建立並啟動container。"
    echo "  down : 停止並移除container。"
    echo "  restart : 停止再啟動down and up，不明怪問題時應該有用"
    echo "  ps : Lists Contaienrs. (docker-compose -f ${base_path}/docker-compose.yml ps)"
    echo "  alias : 顯示consle的別名指令"
    echo "  logs : web service的log, 用Ctrl+C中斷"
    echo "  info : 列出web及db在host的連接埠。"
    echo "  reload : 重載nginx的設定"
    echo "  mysql : 快速進入mysql"
    echo "  link : 目前docker-compose 連結的設定檔"
    echo "  secure: 加入https設定檔"
    echo "  normal : 變更docker-compose連結，讓docker使用標準連結埠，80:443:3306"
    echo "  random : 變更docker-compose連結，讓docker啟用隨機的連接埠，可用./console ps查看"
    echo "  custom : 變更docker-compose連結，產生或使用自定的設定檔"
    echo "  exec : 執行php container內的命令，例如: ./console exec php -v"
    echo "  clear : 移除所有docker ps -a 所有停止的Container!!包含您自己過去創建的所有停止的container哦!!"
    echo "  ./console : 進入php container內"
}
#說明
if [ "${1}" == "help" ]; then
    help
    exit;
fi

if [ "${1}" == "" ]; then

        #檢測是否執行
        docker-compose -f ${base_path}/docker-compose.yml ps |grep -q 9000
        if [ $? -eq 1 ]; then
        docker-compose -f ${base_path}/docker-compose.yml up -d
        fi
        docker-compose -f ${base_path}/docker-compose.yml  exec php sudo -u dlaravel bash

    else
    echo "${1} - Parameter not found"
    help
fi
exit
